name: CI/CD LAMP

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      WP_DB_USER: user
      WP_DB_PASSWORD: poseidon
      WP_DB_NAME: wordpress
      WP_DB_HOST: db:3306
      DOCKER_IMAGE: LOGIN/wordpress-ci:latest

    steps:
      - name: Vérification du  code
        uses: actions/checkout@v4

      - name: Configuration Docker
        run: |
          docker --version
          docker compose version || true

      - name: Configure ‘docker-compose.yml’
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            db:
              image: mysql:8.0
              environment:
                MYSQL_DATABASE: wordpress
                MYSQL_USER: user
                MYSQL_PASSWORD: poseidon
                MYSQL_ROOT_PASSWORD: poseidon
              ports:
                - "3306:3306"
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                interval: 5s
                retries: 5

            wordpress:
              image: wordpress:latest
              depends_on:
                db:
                  condition: service_healthy
              ports:
                - "8080:80"
              environment:
                WORDPRESS_DB_HOST: db:3306
                WORDPRESS_DB_USER: user
                WORDPRESS_DB_PASSWORD: poseidon
                WORDPRESS_DB_NAME: wordpress

            adminer:
              image: adminer
              ports:
                - "8081:8080"
          EOF

      - name: Lance Docker Compose
        run: docker compose up -d

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..12}; do
            docker exec db mysql -uuser -pposeidon -e "SELECT 1" && break
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Test WordPress
        run: |
          curl -f http://localhost:8080 || exit 1
          docker exec db mysql -uuser -pposeidon -e "SHOW DATABASES;"

      - name: Construire l’image Docker
        run: |
          docker build -t $DOCKER_IMAGE .

      - name: Connexion au Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Image  Docker
        run: docker push $DOCKER_IMAGE

      - name: Nettoyage
        if: always()
        run: docker compose down
